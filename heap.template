#include <iostream>
#include <algorithm>
#include <iterator>
#include <vector>

template <typename T>
heap<T>::heap(){
}

template <typename T>
unsigned int heap<T>::size() const{
	return v.size();
}

template <typename T>
bool heap<T>::is_empty() const{
	if (v.size() <= 0)
		return true;
	else
		return false;
}

template <typename T> //parent at (n-1)/2
void heap<T>::insert (const T& item){
	v.push_back(item);
	bool flag = true;
	int i = v.size()-1;
	while(flag){
		if(v[i] > v[(i-1)/2]){
			iter_swap(v.begin() + i, v.begin() + (i-1)/2);
			//swap(v[i], v[(i-1)/2]);
			i = (i-1)/2;
		} else
			flag = false;
	}
	return;
}


template <typename T>
void heap<T>::print(){
	for(int i = 0; i < v.size(); i++)
		std::cout << v[i] << std::endl;
}

    // postcondition: item has been added
template <typename T>
void heap<T>::remove(){
	if(v.size() == 0)
		return;
	for(int i = 0; i < v.size(); i++)
		v[i] = v[i+1];
	v.pop_back();
}
    // precondition: heap is not empty
    // postcondition: largest item has been removed from the heap
template <typename T>
T heap<T>::max() const{
	return v.front();
}
    // precondition: heap is not empty
    // postcondition: copy of largest element in the heap has been returned
template <typename T>
T& heap<T>::max(){
	return v.front();
}
