
template <typename T>
priority_queue<T>::priority_queue(){
	heap<T> h;
}

template <typename T>
void priority_queue<T>::pop(){
	h.remove();
}
    
template <typename T>
void priority_queue<T>::push (const T& item){
	h.insert(item);
}
    
template <typename T>
bool priority_queue<T>::empty () const{
	h.is_empty();
}
   
template <typename T>
unsigned int priority_queue<T>::size() const{
	h.size();
}
   
template <typename T>
T priority_queue<T>::top() const{
	h.max();
}

template <typename T>
void priority_queue<T>::print(){
	h.print();
}
